options(splash, '*** Generated by OFS compiler version 2.0 ***').
stream_import(splash, import(symbols([id(['S',t,r,e,a,m])]),str(['.',/,c,o,m,b,i,n,a,d,o,r,e,s,'.',m,j,s]))).

generator(Filename, program([ISL, SL])) :-
    open(Filename, write, Stream),
    options(splash, Header),
    generate_line_comment(Stream, Header),
    stream_import(splash, StreamImport),
    generate_import_statement(Stream, StreamImport),
    forall(member(Import_statement, ISL),
        generate_import_statement(Stream, Import_statement)),
    forall(member(Statement, SL),
        generate_statement(Stream, Statement)),
    close(Stream)
.

%% generate_import_statement

generate_import_statement(Stream, import(symbols(SymbolsL),str(Path))) :-
    generate_import_symbols(SymbolsL, SymbolsAtomL),
    atomic_list_concat(SymbolsAtomL, ',', SymbolsAtom),
    atomic_list_concat(['{', SymbolsAtom, '}'], SymbolsFullAtom),
    atomic_list_concat(Path, PathAtom),
    format(Stream, 'import ~s from \'~s\';~n', [SymbolsFullAtom, PathAtom])
.

%%% error final option for generate_import_statement
generate_import_statement(Stream, I) :-
    format(atom(Comment), 'Import Statement not generated! ~q', [I]),
    generate_line_comment(Stream, Comment)
.

generate_import_symbols([id(I) | RI], [AtomI | RSymbolsList]) :-
    generate_import_symbols(RI, RSymbolsList),
    atomic_list_concat(I, AtomI)
.

generate_import_symbols([], []).


%% generate_statement
generate_statement(Stream, let( id(I), R)) :- !,
    atomic_list_concat(I, AtomI),
    (R \= undefined
        ->  expression_to_atom(R, AtomE),
            format(Stream, 'let ~s = ~s;~n~n', [AtomI, AtomE])
        ;   format(Stream, 'let ~s = undefined;~n~n', [AtomI])
    )
.

generate_statement(Stream, const( id(I), R)) :- !,
    atomic_list_concat(I, AtomI),
    (R \= undefined
        ->  expression_to_atom(R, AtomE),
            format(Stream, 'let ~s = ~s;~n~n', [AtomI, AtomE])
        ;   format(Stream, 'let ~s = undefined;~n~n', [AtomI])
    )
.

generate_statement(Stream, E) :- !,
    expression_to_atom(E, AtomE),
    format(Stream, '~s;~n~n', [AtomE])
.

%%% error final option for generate_statement
generate_statement(Stream, S) :-
    format(atom(Comment), 'Statement not generated! ~q', [S]),
    generate_line_comment(Stream, Comment)
.

expression_to_atom(iterate_expr(starting_value(Left), iterator(Right)), ExpressionAtom) :-
    expression_to_atom(Left, LeftAtom), 
    expression_to_atom(Right, RightAtom),
    format(atom(ExpressionAtom), 'new Stream( iterable(~s,  ~s, 1000) )', [LeftAtom, RightAtom])
.

expression_to_atom(map_expr(mapper(E)), ExpressionAtom) :-
    expression_to_atom(E, AtomE),
    format(atom(ExpressionAtom), '.map(~s)', [AtomE])
.

expression_to_atom(filter_expr(filter(E)), ExpressionAtom) :-
    expression_to_atom(E, AtomE),
    format(atom(ExpressionAtom), '.filter(~s)', [AtomE])
.

expression_to_atom(cut_expr(cut(E)), ExpressionAtom) :-
    expression_to_atom(E, AtomE),
    format(atom(ExpressionAtom), '.cut(~s)', [AtomE])
.

expression_to_atom(es6_expr(E), ExpressionAtom) :-
    expression_to_atom(E, ExpressionAtom)
.

expression_to_atom(lambda_expr(variables(PE), lambda(E)), ExpressionAtom) :-
    params_to_list(PE, ParamList),
    atomic_list_concat(ParamList, ',', ParamAtom),
    expression_to_atom(E, AtomE),
    format(atom(ExpressionAtom), '(~s) => ~s', [ParamAtom, AtomE])
.

expression_to_atom(boolean_expr(BE), ExpressionAtom) :-
    boolean_to_list(BE, BEList),
    atomic_list_concat(BEList, ExpressionAtom)
.

expression_to_atom(conditional_expr([RE, true_then(TE), false_then(FE)]), ExpressionAtom) :-
    relational_to_list(RE, REList),
    atomic_list_concat(REList, REAtom),
    expression_to_atom(TE, TEAtom),
    expression_to_atom(FE, FEAtom),
    format(atom(ExpressionAtom), '~s ? ~s : ~s', [REAtom, TEAtom, FEAtom])
.

expression_to_atom(array_expr(contents(AC), operation(AO)), ExpressionAtom) :-
    array_contents_to_list(AC, ACList),
    atomic_list_concat(ACList, ACAtom),
    array_operation_to_list(AO, AOList),
    atomic_list_concat(AOList, '+', AOAtom),
    ( AOAtom == ''
        ->  format(format(ExpressionAtom), '[ ~s ]', [ACAtom])
        ;   format(format(ExpressionAtom), '[ ~s ] + ~s', [ACAtom, AOAtom])
    )
.

expression_to_atom([], []).

boolean_to_list([relational_expr(RE) | RBE], [REAtom | RBEList]) :-
    boolean_to_list(RBE, RBEList),
    relational_to_list(RE, REList),
    atomic_list_concat(REList, REAtom)
.

boolean_to_list([bool_op(BO) | RBE], [BO | RBEList]) :-
    boolean_to_list(RBE, RBEList)
.

boolean_to_list([], []).

relational_to_list([arith_expr(AE) | RRE], [AtomArith | RREList]) :-
    relational_to_list(RRE, RREList),
    atomic_list_concat(AE, AtomArith)
.

relational_to_list([rel_opr(RO) | RRE], [RO | RREList]) :-
    relational_to_list(RRE, RREList)
.

relational_to_list([], []).

arith_to_list([arith_opr(AO) | R], [AO | RList]) :-
    arith_to_list(R, RList)
.

arith_to_list([F | R], [AtomF | RList]) :-
    arith_to_list(R, RList),
    factor_to_atom(F, AtomF)
.

arith_to_list([],[]).

factor_to_atom(literal_expr(L), FactorAtom) :-
    literal_to_atom(L, FactorAtom)
.

factor_to_atom(simple_expr(S), FactorAtom) :-
    simple_to_atom(S, FactorAtom)
.

factor_to_atom(unary_expr([unary_opr(UO) | E]), FactorAtom) :-
    expression_to_atom(E, AtomE),
    atomic_list_concat([UO, AtomE], FactorAtom)
.

factor_to_atom(parenthesis_expr(E), FactorAtom) :-
    expression_to_atom(E, AtomE),
    format(atom(FactorAtom), '( ~s )', [AtomE])
.

literal_to_atom(num(N), AtomN) :-
    atomic_list_concat(N, AtomN)
.

literal_to_atom(str(S), AtomS) :-
    atomic_list_concat(S, AtomS)
.

literal_to_atom(bool(B), B).

simple_to_atom([quali_id(QI), null], SimpleAtom) :-
    quali_id_to_list(QI, QualiIdList),
    atomic_list_concat(QualiIdList, SimpleAtom)
.

simple_to_atom([quali_id(QI), args_expr(AE)], SimpleAtom) :-
    quali_id_to_list(QI, QualiIdList),
    atomic_list_concat(QualiIdList, QualiAtom),
    args_to_list(AE, ArgsList),
    atomic_list_concat(ArgsList, ',', ArgsAtom),
    format(atom(SimpleAtom), '~s(~s)', [QualiAtom, ArgsAtom])
.

simple_to_atom([quali_id(QI), assign(E)], SimpleAtom) :-
    quali_id_to_list(QI, QualiIdList),
    atomic_list_concat(QualiIdList, QualiAtom),
    expression_to_atom(E, AtomE),
    format(atom(SimpleAtom), '~s = ~s', [QualiAtom, AtomE])
.

quali_id_to_list([access_expr(id(I)) | RI], [AtomI | RIList]) :-
    quali_id_to_list(RI, RIList),
    atomic_list_concat(I, AtomI)
.

quali_id_to_list(["." | RI], ["." | RIList]) :-
    quali_id_to_list(RI, RIList)
.

quali_it_to_atom([], []).

args_to_list([ E | RAE ], [AtomE | RAEList]) :-
    args_to_list(RAE, RAEList),
    expression_to_atom(E, AtomE)
.

args_to_list([], []).

params_to_list([id(I) | RI], [AtomI | AtomRI]) :-
    params_to_list(RI, AtomRI),
    atomic_list_concat(I, AtomI)
.

params_to_list([], []).

array_contents_to_list([E | RAC], [AtomE | RACList]) :-
    array_contents_to_list(RAC, RACList),
    expression_to_atom(E, AtomE)
.

array_contents_to_list([],[]).

array_operation_to_list([E | AO], [AtomE | AOList]) :-
    array_operation_to_list(AO, AOList),
    expression_to_atom(E, AtomE)
.

array_operation_to_list([], []).

% generate_line_comment
generate_line_comment(Stream, Comment) :-
    format(Stream, '// ~s ~n', [Comment])
.