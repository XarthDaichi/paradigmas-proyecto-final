{
    "id" : "6543384eda174dfe0d7b9f20",
    "name" : "test_2.js",
    "text" : "function* iterable(start = 0, func, end=Infinity) {\nlet n = start;\nwhile(n < end) {\nyield n;\nn = func(n);\n}\n}\nclass Stream {\n#iterable; // esto es para hacer que iterable sea private\nconstructor( iterable ) {\nthis.#iterable = iterable;\n}\nmap( f ) {\nfunction* gen(iterable) {\nfor (const e of iterable) {\nyield f( e );\n}\n}\nreturn new Stream( gen(this.#iterable) );\n}\n\nfilter( p ) {\nfunction* gen(iterable) {\nfor (const e of iterable)\n{\nif( p( e ) ) yield e;\n}\n}\nreturn new Stream( gen(this.#iterable) );\n}\n\ntoList() { // Caution: can only be used with finite iterators\nreturn [...this.#iterable];\n}\ncut( n ) {\nfunction* gen(iterable) {\nlet i = 0;\nfor (const e of iterable) {\n//console.log('cut:', e);\nif (i < n) {\nyield e;\n}\nelse break;\ni++;\n}\n}\nreturn new Stream( gen(this.#iterable) );\n}\n}\n\nconst nats = new Stream( iterable(0, (n) => n + 1, 1000) );\n\nconst even = nats.filter((n) => n % 2 === 0);\n\nconst evenLessThanEleven = even.filter((n) => n < 11);\n\nevenLessThanEleven.map((n) => console.log(n)).cut(10).toList().forEach(e => {}) // Esto de aca se cambio 666"
}