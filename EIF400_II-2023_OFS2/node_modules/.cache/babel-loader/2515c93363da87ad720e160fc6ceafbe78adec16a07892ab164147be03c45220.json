{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\diego\\\\Desktop\\\\paradigmas-proyecto-final\\\\EIF400_II-2023_OFS2\\\\src\\\\components\\\\KeywordChecker.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { API_SERVER_URL } from './Url';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst KeywordChecker = ({\n  text\n}) => {\n  _s();\n  const [isKeyword, setIsKeyword] = useState(false);\n  useEffect(() => {\n    fetch(`${API_SERVER_URL}/word?key=${text}`).then(response => {\n      console.log(response);\n      return response.json();\n    }).then(data => setIsKeyword(data.isKeyword)).catch(error => console.error('Error checking if text is a keyword:', error));\n  }, [text]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"console-box\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [text, \" is a keyword: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: isKeyword ? 'keyword' : '',\n          children: isKeyword.toString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 32\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n_s(KeywordChecker, \"XVvvC+jHEL0QsoLSxQ/gN8mud+o=\");\n_c = KeywordChecker;\nexport default KeywordChecker;\nvar _c;\n$RefreshReg$(_c, \"KeywordChecker\");","map":{"version":3,"names":["React","useState","useEffect","API_SERVER_URL","jsxDEV","_jsxDEV","KeywordChecker","text","_s","isKeyword","setIsKeyword","fetch","then","response","console","log","json","data","catch","error","children","className","toString","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/diego/Desktop/paradigmas-proyecto-final/EIF400_II-2023_OFS2/src/components/KeywordChecker.js"],"sourcesContent":["\nimport React, {useState, useEffect} from 'react';\n\nimport {API_SERVER_URL} from './Url';\n\nconst KeywordChecker = ({ text }) => {\n  const [isKeyword, setIsKeyword] = useState(false);\n\n  useEffect(() => {\n    \n    fetch(`${API_SERVER_URL}/word?key=${text}`)\n      .then((response) => {console.log(response);return response.json();})\n      .then((data) => setIsKeyword(data.isKeyword))\n      .catch((error) => console.error('Error checking if text is a keyword:', error));\n  }, [text]);\n  return (\n    <div>\n      <div className=\"console-box\"> \n        <p>\n          {text} is a keyword: <span className={isKeyword ? 'keyword' : ''}>{isKeyword.toString()}</span> \n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default KeywordChecker;\n"],"mappings":";;AACA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAEhD,SAAQC,cAAc,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EACnC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAEjDC,SAAS,CAAC,MAAM;IAEdS,KAAK,CAAE,GAAER,cAAe,aAAYI,IAAK,EAAC,CAAC,CACxCK,IAAI,CAAEC,QAAQ,IAAK;MAACC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;MAAC,OAAOA,QAAQ,CAACG,IAAI,CAAC,CAAC;IAAC,CAAC,CAAC,CACnEJ,IAAI,CAAEK,IAAI,IAAKP,YAAY,CAACO,IAAI,CAACR,SAAS,CAAC,CAAC,CAC5CS,KAAK,CAAEC,KAAK,IAAKL,OAAO,CAACK,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC,CAAC;EACnF,CAAC,EAAE,CAACZ,IAAI,CAAC,CAAC;EACV,oBACEF,OAAA;IAAAe,QAAA,eACEf,OAAA;MAAKgB,SAAS,EAAC,aAAa;MAAAD,QAAA,eAC1Bf,OAAA;QAAAe,QAAA,GACGb,IAAI,EAAC,iBAAe,eAAAF,OAAA;UAAMgB,SAAS,EAAEZ,SAAS,GAAG,SAAS,GAAG,EAAG;UAAAW,QAAA,EAAEX,SAAS,CAACa,QAAQ,CAAC;QAAC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9F;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAClB,EAAA,CAnBIF,cAAc;AAAAqB,EAAA,GAAdrB,cAAc;AAqBpB,eAAeA,cAAc;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}